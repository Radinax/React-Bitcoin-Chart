{"version":3,"sources":["components/ContainerChart.js","App.js","serviceWorker.js","index.js"],"names":["optionsInfo","chart","foreColor","xaxis","categories","plotOptions","bar","horizontal","fill","colors","dateLabels","enabled","title","text","align","margin","offsetY","style","fontSize","seriesInfo","name","data","ContainerChart","useState","options","setOptions","series","setSeries","useEffect","fetch","then","response","json","Object","keys","bpi","values","type","height","width","textAlign","textDecoration","color","href","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6MAGMA,EAAc,CAClBC,MAAO,CAELC,UAAW,QAEbC,MAAO,CACLC,WAAY,IAEdC,YAAa,CACXC,IAAK,CACHC,YAAY,IAGhBC,KAAM,CACJC,OAAQ,CAAC,YAEXC,WAAY,CACVC,SAAS,GAEXC,MAAO,CACLC,KAAM,sBACNC,MAAO,SACPC,OAAQ,GACRC,QAAS,GACTC,MAAO,CACLC,SAAU,UAKVC,EAAa,CACjB,CACEC,KAAM,UACNC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OAuDpCC,EAnDQ,WAAO,IAAD,EACGC,mBAASvB,GADZ,mBACpBwB,EADoB,KACXC,EADW,OAECF,mBAASJ,GAFV,mBAEpBO,EAFoB,KAEZC,EAFY,KAI3BC,qBAAU,WACRC,MAAM,yDACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACT,GACLI,EAAW,eACNzB,EADK,CAERG,MAAO,CAAEC,WAAY6B,OAAOC,KAAKb,EAAKc,SAExCR,EAAU,CACR,CACEP,KAAM,QACNC,KAAMY,OAAOG,OAAOf,EAAKc,aAIhC,IAWH,OACE,6BACE,oCACE,kBAAC,IAAD,CACEX,QAASA,EACTE,OAAQA,EACRW,KAAK,OACLC,OAAO,MACPC,MAAM,SAER,yBAAKtB,MAnBK,CACduB,UAAW,SACXtB,SAAU,KAiBN,UACU,IACR,uBAAGD,MAjBE,CACXwB,eAAgB,OAChBC,MAAO,WAeeC,KAAK,8BAArB,oBCzEKC,EANH,kBACV,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.310bf896.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nconst optionsInfo = {\r\n  chart: {\r\n    //background: '#f4f4f4',\r\n    foreColor: \"#333\",\r\n  },\r\n  xaxis: {\r\n    categories: [],\r\n  },\r\n  plotOptions: {\r\n    bar: {\r\n      horizontal: false, // if true it would be horizontal\r\n    },\r\n  },\r\n  fill: {\r\n    colors: [\"#f44336\"],\r\n  },\r\n  dateLabels: {\r\n    enabled: false,\r\n  },\r\n  title: {\r\n    text: \"Bitcoin Price Chart\",\r\n    align: \"center\",\r\n    margin: 20,\r\n    offsetY: 20,\r\n    style: {\r\n      fontSize: \"25px\",\r\n    },\r\n  },\r\n};\r\n\r\nconst seriesInfo = [\r\n  {\r\n    name: \"Numbers\",\r\n    data: [855, 397, 272, 229, 100, 157, 333, 999, 1000],\r\n  },\r\n];\r\n\r\nconst ContainerChart = () => {\r\n  const [options, setOptions] = useState(optionsInfo);\r\n  const [series, setSeries] = useState(seriesInfo);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.coindesk.com/v1/bpi/historical/close.json\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setOptions({\r\n          ...optionsInfo,\r\n          xaxis: { categories: Object.keys(data.bpi) },\r\n        });\r\n        setSeries([\r\n          {\r\n            name: \"Price\",\r\n            data: Object.values(data.bpi),\r\n          },\r\n        ]);\r\n      });\r\n  }, []);\r\n\r\n  const styling = {\r\n    textAlign: \"center\",\r\n    fontSize: 20,\r\n  };\r\n  const aTag = {\r\n    textDecoration: \"none\",\r\n    color: \"#006bb3\",\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <>\r\n        <Chart\r\n          options={options}\r\n          series={series}\r\n          type=\"line\"\r\n          height=\"450\"\r\n          width=\"100%\"\r\n        />\r\n        <div style={styling}>\r\n          Made by{\" \"}\r\n          <a style={aTag} href=\"https://github.com/Radinax\">\r\n            Adrian Beria\r\n          </a>\r\n        </div>\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContainerChart;\r\n","import React from \"react\";\r\nimport ContainerChart from \"./components/ContainerChart\";\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <ContainerChart />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}